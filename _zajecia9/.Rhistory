# logarytmy
for (i in c("addedval", "employment", "totalassets")) {
firms[ , paste("l",i)] = log(firms[ , paste(i)])
}
paste("l",added)
print(paste("l",added))
help(paste)
# logarytmy
for (i in c("addedval", "employment", "totalassets")) {
firms[ , paste("l", i, sep = "")] = log(firms[ , paste(i)])
}
######### Przykład empiryczny - funkcja produkcji ##############################
rm(list = ls()) # wyczyść środowisko
## instalowanie pakietów
# install.packages("dyplyr")
# install.packages("wooldridge")    # dane z podręcznika Wooldrigde
# install.packages("skimr")         # statystyki opisowe
# install.packages("stargazer")     # latex tabele
# install.packages("sandwich")      # błędy standardowe
# install.packages("summarytools")  # też do statystyk opisowych
# install.packages("writexl")       # zapisywanie w excelu
# install.packages("lmtest")        # testowanie
# install.packages("whitestrap")    # test White'a
## ładowanie pakietów
library(tidyr)
library(dplyr)
library(lmtest)
library(summarytools)
library(sandwich)
library(stargazer)
library(skimr)
library(wooldridge)
library(writexl)
library(whitestrap)
# W tym zadaniu będziemy pracować z funkcją produkcji typu Cobba-Douglasa:
#   Y = A * K^α * L^β
#
#   Jest to model potęgowy, który możemy zlinearyzować, korzystając z logarytmu:
#   log(Y) = log(A) + α log(K) + β log(L)
#
#   Dodając składnik losowy ε i stałą otrzymujemy równanie, które możemy oszacować
#   metodą najmniejszych kwadratów. Zauważ, że nie obserwujemy A, czyli produktywności.
#   log(Y) = β_0 + α log(K) + β log(L) + ε
#
#   Aby oszacować to równanie, skorzystaj z danych >>firms.csv<<
##### przygotowanie danych #####
## ścieżka
setwd("C:\\Users\\szalas\\OneDrive\\_ekonometria2023\\_9")
##### wczytanie danych i wstępne przetworzenie #####
firms = read.csv("data\\firms.csv", header = TRUE, sep = ",", quote = "\"",
dec = ".", fill = TRUE)
## zmieniam nazwy aby były bardziej zrozumiałe:
colnames(firms) = c("X", "id", "year", "employment", "addedval", "laborcost", "sales", "totalassets", "nacerev1primarycode", "year_inc", "indcode")
firms = firms %>% select(-c("X")) # usuwam tą zmienną
## opis danych
# id - id firmy
# year - rok
# employment - zatrudnienie w w danej firmie
# addedval - wartość dodana
# laborcost - koszt pracy - suma wydatków na płace
# sales - przychód ze sprzedaży
# totalassets - suma wartości wszytskich aktywów posiadanych przez firmę
# nacerev1primarycode  - 4-cyfrowy kod sektorowy (cos jak PKD)
# year_inc - rok założenia firmy
# indcode - 2-cyfrowy kod sektorowy
##### (i) #####
#     Wczytaj dane do R. Czy występują braki danych?
#     Jeśli tak, pozbądź się ich.
#     Stwórz logarytmy zmiennych.
# usuwamy brakujące dane
firms = drop_na(firms, any_of( c("laborcost", "addedval", "employment", "totalassets") )  )
# Ponadto, ujemne wartości nie mają w tym przypadku ekonomicznego sensu,
# dlatego można je usunąć ze zbioru danych
# czy są ujemne wartości w zmiennych?
with(firms, table( sign(addedval) ))
with(firms, table( sign(employment) ))
with(firms, table( sign(laborcost) ))
with(firms, table( sign(totalassets) ))
# zostawmy tylko dodatnie wartości
firms = subset(firms, addedval>0 & laborcost>0 & totalassets>0 )
# logarytmy
for (i in c("addedval", "employment", "totalassets")) {
firms[ , paste("l", i, sep = "")] = log(firms[ , paste(i)])
}
model1 = lm(laddedval ~ ltotalassets + lemployment , firms)
summary(model)
# Oszacuj model (1).
model1 = lm(laddedval ~ ltotalassets + lemployment , firms)
summary(model1)
# Czy oszacowania parametrów są istotne statystycznie?
summary(model1)
firms$resid2 = (resid(model1))^2
plot(firms$lemployment , firms$resid2)
plot(firms$ltotalassets, firms$resid2)
white_test(model1)
bptest(model1, data=cps09, studentize=FALSE)
cov1 = vcovHC(model1, type = "HC0")
robust.se1 <- sqrt(diag(cov1))
# raportowanie
stargazer(model1, model1,
type = "text",
se=list(NULL, robust.se1),
column.labels=c("default","robust"),
align=TRUE,
keep.stat = c("n", "rsq", "adj.rsq", "f"),
omit = c("Constant"),
title = "Oszacowanie funkcji produkcji.",
out = "output\\model_firmy_hc.txt" )
# raportowanie
stargazer(model1, model1,
type = "text",
se=list(NULL, robust.se1),
column.labels=c("zwykle","odporne"),
align=TRUE,
keep.stat = c("n", "rsq", "adj.rsq", "f"),
omit = c("Constant"),
title = "Oszacowanie funkcji produkcji.",
out = "output\\model_firmy_hc.txt" )
# odporne błędy standardowe (kolumna (2))są nieco wyższe niż zwykłe, ale niewiele.
View(firms)
skim(firms)
View(firms)
table(firms$indcode)
firms = firms[ , "indcode"<10]
##### przygotowanie danych #####
## ścieżka
setwd("C:\\Users\\szalas\\OneDrive\\_ekonometria2023\\_9")
##### wczytanie danych i wstępne przetworzenie #####
firms = read.csv("data\\firms.csv", header = TRUE, sep = ",", quote = "\"",
dec = ".", fill = TRUE)
## zmieniam nazwy aby były bardziej zrozumiałe:
colnames(firms) = c("X", "id", "year", "employment", "addedval", "laborcost", "sales", "totalassets", "nacerev1primarycode", "year_inc", "indcode")
firms = firms %>% select(-c("X")) # usuwam tą zmienną
firms = drop_na(firms, any_of( c("laborcost", "addedval", "employment", "totalassets") )  )
# Ponadto, ujemne wartości nie mają w tym przypadku ekonomicznego sensu,
# dlatego można je usunąć ze zbioru danych
# czy są ujemne wartości w zmiennych?
with(firms, table( sign(addedval) ))
with(firms, table( sign(employment) ))
with(firms, table( sign(laborcost) ))
with(firms, table( sign(totalassets) ))
# zostawmy tylko dodatnie wartości
firms = subset(firms, addedval>0 & laborcost>0 & totalassets>0 )
# logarytmy
# można zrobić to ręcznie, logarytmując każdą ze zmiennych oddzielnie,
# można też skorzystać z pętli:
for (i in c("addedval", "employment", "totalassets")) {
firms[ , paste("l", i, sep = "")] = log(firms[ , paste(i)])
}
##### (ii) #####
##### (iii) #####
# Oszacuj model (1).
model1 = lm(laddedval ~ ltotalassets + lemployment , firms)
## Czy oszacowania parametrów są istotne statystycznie?
summary(model1)
# Spójrz na p-value przy każdym z oszacowań, są bardzo niskie,
# więc tak, oszacowania są istotne statystycznie
## Czy oszacowania są łącznie istotne statystycznie?
# Spójrz na Statystykę F oraz  związane z nią p-value.
# Statystyka F jest bardzo wysoka a p-valye jest bardzo niskie,
# Zatem, oszacowania są łącznie istotne statystycznie
## Skomentuj dopasowanie modelu do danych.
# R2 wynosi 0.7 - 70 proc. zmienności logarytmu wartości dodanej jest wyjaśniane
# przez model
##### (iv) #####
## Sprawdź czy w modelu (1) występuje heteroskedastyczność.
## Narysuj odpowiednie wykresy.
# chodzi o wykres kwadratów reszt
firms$resid2 = (resid(model1))^2
plot(firms$lemployment , firms$resid2)
plot(firms$ltotalassets, firms$resid2)
#
## Przeprowadź testy Breuscha-Pagana oraz White’a.
# test White'a
white_test(model1)
# test Breuscha Pagana
bptest(model1, data=cps09, studentize=FALSE)
# w obu testach p-value jest bardzo niskie - możemy odrzucić hipotezę zerową
# o homoskedastyczności składnika losowego. Przyjmujemy więc hipotezę alternatywną,
# heteroskedastyczności składnika losowego
## Jaki typ błędów standardowych należy wykorzystać?
# w takim przypadku trzeba zastosować odporne błędy standardowe
## Porównaj oszacowania zwykłych i odpornych błędów standardowych. Zaraportuj wyniki.
# najpierw oszacujemy odporne błędy standardowe - korzystamy z pakietu sandwich
cov1 = vcovHC(model1, type = "HC0")
robust.se1 <- sqrt(diag(cov1))
# raportowanie
stargazer(model1, model1,
type = "text",
se=list(NULL, robust.se1),
column.labels=c("zwykle","odporne"),
align=TRUE,
keep.stat = c("n", "rsq", "adj.rsq", "f"),
omit = c("Constant"),
title = "Oszacowanie funkcji produkcji.",
out = "output\\model_firmy_hc.txt" )
# odporne błędy standardowe (kolumna (2)) są nieco wyższe niż zwykłe, ale niewiele.
##### (v) #####
# Stwórz zmienną binarną, opisującą przynależność firmy do sektora przemysłowego.
#
firms = firms["indcode"<10 , ]
firms$manufacturing = ifelse( firms$indcode >=10 & firms$indcode <= 43)
##### przygotowanie danych #####
## ścieżka
setwd("C:\\Users\\szalas\\OneDrive\\_ekonometria2023\\_9")
##### wczytanie danych i wstępne przetworzenie #####
firms = read.csv("data\\firms.csv", header = TRUE, sep = ",", quote = "\"",
dec = ".", fill = TRUE)
## zmieniam nazwy aby były bardziej zrozumiałe:
colnames(firms) = c("X", "id", "year", "employment", "addedval", "laborcost", "sales", "totalassets", "nacerev1primarycode", "year_inc", "indcode")
firms = firms %>% select(-c("X")) # usuwam tą zmienną
## opis danych
# id - id firmy
# year - rok
# employment - zatrudnienie w w danej firmie
# addedval - wartość dodana
# laborcost - koszt pracy - suma wydatków na płace
# sales - przychód ze sprzedaży
# totalassets - suma wartości wszytskich aktywów posiadanych przez firmę
# nacerev1primarycode  - 4-cyfrowy kod sektorowy (cos jak PKD)
# year_inc - rok założenia firmy
# indcode - 2-cyfrowy kod sektorowy
##### (i) #####
#     Wczytaj dane do R. Czy występują braki danych?
#     Jeśli tak, pozbądź się ich.
#     Stwórz logarytmy zmiennych.
# usuwamy brakujące dane
firms = drop_na(firms, any_of( c("laborcost", "addedval", "employment", "totalassets") )  )
# Ponadto, ujemne wartości nie mają w tym przypadku ekonomicznego sensu,
# dlatego można je usunąć ze zbioru danych
# czy są ujemne wartości w zmiennych?
with(firms, table( sign(addedval) ))
with(firms, table( sign(employment) ))
with(firms, table( sign(laborcost) ))
with(firms, table( sign(totalassets) ))
# zostawmy tylko dodatnie wartości
firms = subset(firms, addedval>0 & laborcost>0 & totalassets>0 )
# logarytmy
# można zrobić to ręcznie, logarytmując każdą ze zmiennych oddzielnie,
# można też skorzystać z pętli:
for (i in c("addedval", "employment", "totalassets")) {
firms[ , paste("l", i, sep = "")] = log(firms[ , paste(i)])
}
##### (ii) #####
##### (iii) #####
# Oszacuj model (1).
model1 = lm(laddedval ~ ltotalassets + lemployment , firms)
## Czy oszacowania parametrów są istotne statystycznie?
summary(model1)
# Spójrz na p-value przy każdym z oszacowań, są bardzo niskie,
# więc tak, oszacowania są istotne statystycznie
## Czy oszacowania są łącznie istotne statystycznie?
# Spójrz na Statystykę F oraz  związane z nią p-value.
# Statystyka F jest bardzo wysoka a p-valye jest bardzo niskie,
# Zatem, oszacowania są łącznie istotne statystycznie
## Skomentuj dopasowanie modelu do danych.
# R2 wynosi 0.7 - 70 proc. zmienności logarytmu wartości dodanej jest wyjaśniane
# przez model
##### (iv) #####
## Sprawdź czy w modelu (1) występuje heteroskedastyczność.
## Narysuj odpowiednie wykresy.
# chodzi o wykres kwadratów reszt
firms$resid2 = (resid(model1))^2
plot(firms$lemployment , firms$resid2)
plot(firms$ltotalassets, firms$resid2)
#
## Przeprowadź testy Breuscha-Pagana oraz White’a.
# test White'a
white_test(model1)
# test Breuscha Pagana
bptest(model1, data=cps09, studentize=FALSE)
# w obu testach p-value jest bardzo niskie - możemy odrzucić hipotezę zerową
# o homoskedastyczności składnika losowego. Przyjmujemy więc hipotezę alternatywną,
# heteroskedastyczności składnika losowego
## Jaki typ błędów standardowych należy wykorzystać?
# w takim przypadku trzeba zastosować odporne błędy standardowe
## Porównaj oszacowania zwykłych i odpornych błędów standardowych. Zaraportuj wyniki.
# najpierw oszacujemy odporne błędy standardowe - korzystamy z pakietu sandwich
cov1 = vcovHC(model1, type = "HC0")
robust.se1 <- sqrt(diag(cov1))
# raportowanie
stargazer(model1, model1,
type = "text",
se=list(NULL, robust.se1),
column.labels=c("zwykle","odporne"),
align=TRUE,
keep.stat = c("n", "rsq", "adj.rsq", "f"),
omit = c("Constant"),
title = "Oszacowanie funkcji produkcji.",
out = "output\\model_firmy_hc.txt" )
# odporne błędy standardowe (kolumna (2)) są nieco wyższe niż zwykłe, ale niewiele.
##### (v) #####
# Stwórz zmienną binarną, opisującą przynależność firmy do sektora przemysłowego.
#
firms = firms %>% filter(., indcode<10)
firms$manufacturing = ifelse( firms$indcode >=10 & firms$indcode <= 43)
firms$manufacturing = ifelse( firms$indcode >=10 & firms$indcode <= 43 , 1, 0)
View(firms)
# W tym zadaniu będziemy pracować z funkcją produkcji typu Cobba-Douglasa:
#   Y = A * K^α * L^β
#
#   Jest to model potęgowy, który możemy zlinearyzować, korzystając z logarytmu:
#   log(Y) = log(A) + α log(K) + β log(L)
#
#   Dodając składnik losowy ε i stałą otrzymujemy równanie, które możemy oszacować
#   metodą najmniejszych kwadratów. Zauważ, że nie obserwujemy A, czyli produktywności.
#   log(Y) = β_0 + α log(K) + β log(L) + ε
#
#   Aby oszacować to równanie, skorzystaj z danych >>firms.csv<<
##### przygotowanie danych #####
## ścieżka
setwd("C:\\Users\\szalas\\OneDrive\\_ekonometria2023\\_9")
##### wczytanie danych i wstępne przetworzenie #####
firms = read.csv("data\\firms.csv", header = TRUE, sep = ",", quote = "\"",
dec = ".", fill = TRUE)
## zmieniam nazwy aby były bardziej zrozumiałe:
colnames(firms) = c("X", "id", "year", "employment", "addedval", "laborcost", "sales", "totalassets", "nacerev1primarycode", "year_inc", "indcode")
firms = firms %>% select(-c("X")) # usuwam tą zmienną
## opis danych
# id - id firmy
# year - rok
# employment - zatrudnienie w w danej firmie
# addedval - wartość dodana
# laborcost - koszt pracy - suma wydatków na płace
# sales - przychód ze sprzedaży
# totalassets - suma wartości wszytskich aktywów posiadanych przez firmę
# nacerev1primarycode  - 4-cyfrowy kod sektorowy (cos jak PKD)
# year_inc - rok założenia firmy
# indcode - 2-cyfrowy kod sektorowy
##### (i) #####
#     Wczytaj dane do R. Czy występują braki danych?
#     Jeśli tak, pozbądź się ich.
#     Stwórz logarytmy zmiennych.
# usuwamy brakujące dane
firms = drop_na(firms, any_of( c("laborcost", "addedval", "employment", "totalassets") )  )
# Ponadto, ujemne wartości nie mają w tym przypadku ekonomicznego sensu,
# dlatego można je usunąć ze zbioru danych
# czy są ujemne wartości w zmiennych?
with(firms, table( sign(addedval) ))
with(firms, table( sign(employment) ))
with(firms, table( sign(laborcost) ))
with(firms, table( sign(totalassets) ))
# zostawmy tylko dodatnie wartości
firms = subset(firms, addedval>0 & laborcost>0 & totalassets>0 )
# logarytmy
# można zrobić to ręcznie, logarytmując każdą ze zmiennych oddzielnie,
# można też skorzystać z pętli:
for (i in c("addedval", "employment", "totalassets")) {
firms[ , paste("l", i, sep = "")] = log(firms[ , paste(i)])
}
##### (ii) #####
##### (iii) #####
# Oszacuj model (1).
model1 = lm(laddedval ~ ltotalassets + lemployment , firms)
## Czy oszacowania parametrów są istotne statystycznie?
summary(model1)
# Spójrz na p-value przy każdym z oszacowań, są bardzo niskie,
# więc tak, oszacowania są istotne statystycznie
## Czy oszacowania są łącznie istotne statystycznie?
# Spójrz na Statystykę F oraz  związane z nią p-value.
# Statystyka F jest bardzo wysoka a p-valye jest bardzo niskie,
# Zatem, oszacowania są łącznie istotne statystycznie
## Skomentuj dopasowanie modelu do danych.
# R2 wynosi 0.7 - 70 proc. zmienności logarytmu wartości dodanej jest wyjaśniane
# przez model
##### (iv) #####
## Sprawdź czy w modelu (1) występuje heteroskedastyczność.
## Narysuj odpowiednie wykresy.
# chodzi o wykres kwadratów reszt
firms$resid2 = (resid(model1))^2
plot(firms$lemployment , firms$resid2)
plot(firms$ltotalassets, firms$resid2)
#
## Przeprowadź testy Breuscha-Pagana oraz White’a.
# test White'a
white_test(model1)
# test Breuscha Pagana
bptest(model1, data=cps09, studentize=FALSE)
# w obu testach p-value jest bardzo niskie - możemy odrzucić hipotezę zerową
# o homoskedastyczności składnika losowego. Przyjmujemy więc hipotezę alternatywną,
# heteroskedastyczności składnika losowego
## Jaki typ błędów standardowych należy wykorzystać?
# w takim przypadku trzeba zastosować odporne błędy standardowe
## Porównaj oszacowania zwykłych i odpornych błędów standardowych. Zaraportuj wyniki.
# najpierw oszacujemy odporne błędy standardowe - korzystamy z pakietu sandwich
cov1 = vcovHC(model1, type = "HC0")
robust.se1 <- sqrt(diag(cov1))
# raportowanie
stargazer(model1, model1,
type = "text",
se=list(NULL, robust.se1),
column.labels=c("zwykle","odporne"),
align=TRUE,
keep.stat = c("n", "rsq", "adj.rsq", "f"),
omit = c("Constant"),
title = "Oszacowanie funkcji produkcji.",
out = "output\\model_firmy_hc.txt" )
# odporne błędy standardowe (kolumna (2)) są nieco wyższe niż zwykłe, ale niewiele.
##### (v) #####
# Stwórz zmienną binarną, opisującą przynależność firmy do sektora przemysłowego.
#
firms = firms %>% filter(., indcode<10)
firms$manufacturing = ifelse( firms$indcode >=10 & firms$indcode <= 43 , 1, 0)
##### przygotowanie danych #####
## ścieżka
setwd("C:\\Users\\szalas\\OneDrive\\_ekonometria2023\\_9")
##### wczytanie danych i wstępne przetworzenie #####
firms = read.csv("data\\firms.csv", header = TRUE, sep = ",", quote = "\"",
dec = ".", fill = TRUE)
## zmieniam nazwy aby były bardziej zrozumiałe:
colnames(firms) = c("X", "id", "year", "employment", "addedval", "laborcost", "sales", "totalassets", "nacerev1primarycode", "year_inc", "indcode")
firms = firms %>% select(-c("X")) # usuwam tą zmienną
## opis danych
# id - id firmy
# year - rok
# employment - zatrudnienie w w danej firmie
# addedval - wartość dodana
# laborcost - koszt pracy - suma wydatków na płace
# sales - przychód ze sprzedaży
# totalassets - suma wartości wszytskich aktywów posiadanych przez firmę
# nacerev1primarycode  - 4-cyfrowy kod sektorowy (cos jak PKD)
# year_inc - rok założenia firmy
# indcode - 2-cyfrowy kod sektorowy
##### (i) #####
#     Wczytaj dane do R. Czy występują braki danych?
#     Jeśli tak, pozbądź się ich.
#     Stwórz logarytmy zmiennych.
# usuwamy brakujące dane
firms = drop_na(firms, any_of( c("laborcost", "addedval", "employment", "totalassets") )  )
# Ponadto, ujemne wartości nie mają w tym przypadku ekonomicznego sensu,
# dlatego można je usunąć ze zbioru danych
# czy są ujemne wartości w zmiennych?
with(firms, table( sign(addedval) ))
with(firms, table( sign(employment) ))
with(firms, table( sign(laborcost) ))
with(firms, table( sign(totalassets) ))
# zostawmy tylko dodatnie wartości
firms = subset(firms, addedval>0 & laborcost>0 & totalassets>0 )
# logarytmy
# można zrobić to ręcznie, logarytmując każdą ze zmiennych oddzielnie,
# można też skorzystać z pętli:
for (i in c("addedval", "employment", "totalassets")) {
firms[ , paste("l", i, sep = "")] = log(firms[ , paste(i)])
}
##### (ii) #####
##### (iii) #####
# Oszacuj model (1).
model1 = lm(laddedval ~ ltotalassets + lemployment , firms)
## Czy oszacowania parametrów są istotne statystycznie?
summary(model1)
# Spójrz na p-value przy każdym z oszacowań, są bardzo niskie,
# więc tak, oszacowania są istotne statystycznie
## Czy oszacowania są łącznie istotne statystycznie?
# Spójrz na Statystykę F oraz  związane z nią p-value.
# Statystyka F jest bardzo wysoka a p-valye jest bardzo niskie,
# Zatem, oszacowania są łącznie istotne statystycznie
## Skomentuj dopasowanie modelu do danych.
# R2 wynosi 0.7 - 70 proc. zmienności logarytmu wartości dodanej jest wyjaśniane
# przez model
##### (iv) #####
## Sprawdź czy w modelu (1) występuje heteroskedastyczność.
## Narysuj odpowiednie wykresy.
# chodzi o wykres kwadratów reszt
firms$resid2 = (resid(model1))^2
plot(firms$lemployment , firms$resid2)
plot(firms$ltotalassets, firms$resid2)
#
## Przeprowadź testy Breuscha-Pagana oraz White’a.
# test White'a
white_test(model1)
# test Breuscha Pagana
bptest(model1, data=cps09, studentize=FALSE)
# w obu testach p-value jest bardzo niskie - możemy odrzucić hipotezę zerową
# o homoskedastyczności składnika losowego. Przyjmujemy więc hipotezę alternatywną,
# heteroskedastyczności składnika losowego
## Jaki typ błędów standardowych należy wykorzystać?
# w takim przypadku trzeba zastosować odporne błędy standardowe
## Porównaj oszacowania zwykłych i odpornych błędów standardowych. Zaraportuj wyniki.
# najpierw oszacujemy odporne błędy standardowe - korzystamy z pakietu sandwich
cov1 = vcovHC(model1, type = "HC0")
robust.se1 <- sqrt(diag(cov1))
# raportowanie
stargazer(model1, model1,
type = "text",
se=list(NULL, robust.se1),
column.labels=c("zwykle","odporne"),
align=TRUE,
keep.stat = c("n", "rsq", "adj.rsq", "f"),
omit = c("Constant"),
title = "Oszacowanie funkcji produkcji.",
out = "output\\model_firmy_hc.txt" )
# odporne błędy standardowe (kolumna (2)) są nieco wyższe niż zwykłe, ale niewiele.
##### (v) #####
# Stwórz zmienną binarną, opisującą przynależność firmy do sektora przemysłowego.
#
table(firms$indcode)
firms = firms %>% filter(., indcode>=10)
firms$manufacturing = ifelse( firms$indcode >=10 & firms$indcode <= 43 , 1, 0)
model2 = lm(laddedval ~ ltotalassets + lemployment + manufacturing, firms)
# Firmy z którego sektora są bardziej produktywne?
summary(model2)
# Stwórz zmienną opisującą wiek. Czy wraz z wiekiem produkcja rośnie?
firms$age = firms$year - firms$year_inc + 1
# Oszacuj model z tą zmienną.
model3 = lm(laddedval ~ ltotalassets + lemployment + manufacturing + manufacturing + age, firms)
summary(model3)
table(firms)
table(firms$age)
table(firms$year_inc)
# Stwórz zmienną opisującą wiek. Czy wraz z wiekiem produkcja rośnie?
histogram(firms$age)
hist(firms$age)
