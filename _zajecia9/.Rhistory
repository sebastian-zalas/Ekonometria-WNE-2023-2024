r_square
model1simple = lm(data = charity, formula = gift ~ propresp)
ssr = sum((model1simple$residuals)^2)
sst = sum((charity$gift - mean(charity$gift))^2)
r_square_simple = 1 - ssr/sst
r_square_simple
# r kwadrat z prostej regresji jest oczywiście niższy ponieważ właściwy model zawiera więcej zmiennych objaśniających
## (ii)
model1$coefficients["mailsyear"]
lm(data = charity, formula = gift ~ mailsyear)
lm(data = charity, formula = gift ~ mailsyear)
View(model1)
vcov(model1)
## (iv)
## oszacuj model
model2 = lm(data = charity, formula = gift ~ mailsyear + giftlast + propresp + avggift)
model2$coefficients["mailsyear"]
# współczynnik przy 'mailsyear' mocno spadł.
vcov(model2)
## (v)
model1$coefficients["giftlast"]
model2$coefficients["giftlast"]
help(correlation)
cor(charity$avggift, charity$giftlast)
model2 = lm(data = charity, formula = gift ~ mailsyear + giftlast + propresp + avggift)
summary(model2)
cor(charity$avggift, charity$giftlast)
######## Testy diagnostyczne ########
# czyszczenie środowiska
rm(list = ls())
# załadowanie danych
cps = read.table("https://raw.githubusercontent.com/sebastian-zalas/Ekonometria-WNE-2022-23/main/class11/cps.csv",
sep = ",", header = T, dec = "." )
# model
model = lm(data = cps, formula = log(wage) ~ educ + exper + I(exper^2)+ female)
summary(model)
odporna1 = coeftest(model, vcov.=vcovHC(OLS, type="HC0"))
library(lmtest)
# macierz odporna White’a
odporna1 = coeftest(model, vcov.=vcovHC(OLS, type="HC0"))
library(sandwich)
# macierz odporna White’a
odporna1 = coeftest(model, vcov.=vcovHC(OLS, type="HC0"))
# macierz odporna White’a
odporna1 = coeftest(model, vcov.=vcovHC(model, type="HC0"))
show(odporna1)
library(car)
# testowanie hipotez
linearHypothesis(model = OLS, c("educ=0"), vcov.=odporna1)
# testowanie hipotez
linearHypothesis(model = model, c("educ=0"), vcov.=odporna1)
######## Testy diagnostyczne ########
# czyszczenie środowiska
rm(list = ls())
# pakiety
#install.packages("lmtest")
library(lmtest)
library(sandwich)
library(car)
# załadowanie danych
cps = read.table("https://raw.githubusercontent.com/sebastian-zalas/Ekonometria-WNE-2022-23/main/class11/cps.csv",
sep = ",", header = T, dec = "." )
# model
model1 = lm(data = cps, formula = log(wage) ~ educ + exper + I(exper^2)+ female)
summary(model1)
# heteroskedastyczność
# macierz odporna White’a
odporna1 = coeftest(model1, vcov.=vcovHC(model1, type="HC0"))
show(odporna1)
# testowanie hipotez
linearHypothesis(model = model1, c("educ=0"), vcov.=odporna1)
# testowanie hipotez
linearHypothesis(model = model1, c("educ=0"), vcov.=odporna1)
odporna1 = coeftest(model1, vcov.=vcovHC(model1, type="HC0"))
show(odporna1)
vcovHC(model1, type="HC0")
cor(cps, method = c("pearson"))
######## Testy diagnostyczne ########
# czyszczenie środowiska
rm(list = ls())
# pakiety
#install.packages("lmtest")
library(lmtest)
library(sandwich)
library(car)
# załadowanie danych
cps = read.table("https://raw.githubusercontent.com/sebastian-zalas/Ekonometria-WNE-2022-23/main/class11/cps.csv",
sep = ",", header = T, dec = "." )
# model
cps$lwage = log(cps$wage)
cps$exper2 = (cps$exper)^2
model1 = lm(data = cps, formula = lwage ~ educ + exper + exper2 + female)
summary(model1)
zmienne = c(cps$educ, cps$exper, cps$exper2, cps$female )
print(zmienne)
cps[, c(1,3,4,5,6,7)]
cor(cps[, c("educ", "exper", "exper2", "female")], method = c("pearson"))
vif(model)
install.packages("(tsoutliers")
library(tsoutliers)
install.packages("tsoutliers")
# reset
resettest(model, power = 3, type = "fitted", data = cps)
JarqueBera.test(model$residuals)
library(tsoutliers)
JarqueBera.test(model$residuals)
JarqueBera.test(model1$residuals)
library(lmtest)
resettest(model1, power = 3, type = "fitted", data = cps)
help("resettest")
resettest(model1, power = 3, type = "fitted", data = cps, vcov = vcov.=odporna1)
resettest(model1, power = 3, type = "fitted", data = cps, vcov =odporna1)
odporna1 = coeftest(model1, vcov.=vcovHC(model1, type="HC0"))
resettest(model1, power = 3, type = "fitted", data = cps, vcov =odporna1)
# testowanie hipotez
linearHypothesis(model = model1, c("educ=0"), vcov.=odporna1)
1 - (7439/(7440-2-1))*(1-0.162)
a = (224586 - (109858 + 84057)) / (7)
b = (109858 + 84057) / (358688 - 14)
c = a / b
warnings()
warnings()
at <- rbind(c(1,0,0,1), c(1,1,0,1), c(1,1,1,1), c(0,1,1,1)
mat <- rbind(c(1,0,0,1), c(1,1,0,1), c(1,1,1,1), c(0,1,1,1))
mat
mat <- rbind(c(1,0,0,1), c(1,1,0,1), c(1,1,1,1), c(0,1,1,1))
mat
det(mat)
GPA =	c(2.8, 3.4, 3, 3.5, 3.6, 3, 2.7, 3.7)
ACT =	c(21,	24,	26,	27,	29,	25,	25,	30)
# współczynniki
beta_1 = cov(GPA, ACT) / var(ACT)
beta_0 = mean(GPA) + beta_1 * mean(ACT)
cov(GPA, ACT)
var(ACT)
beta_1
mean(GPA)
mean(ACT)
beta_1
beta_0
0.1021978*5
5.856868 + 0.1021978 * 20
3.2125 - 0.1021978 \times 25.875 = 5.856868
3.2125 - 0.1021978 * 25.875 = 5.856868
3.2125 - 0.1021978 * 25.875
0.5681319 + 0.1021978 \times 20
0.5681319 + 0.1021978 * 20
# reszty
reszty = GPA - (0.5681319 + 0.1021978 * ACT)
sum(reszty)
sum(reszty)
t(reszty)
0.5681319 + 0.1021978 * 20
reszty
# szacowanie modelu macierzowo
X=cbind(rep(1,8), ACT)
x
X
beta = solve(t(X)%*%X)t(X)GPA
beta = solve(t(X)%*%X) * t(X) * GPA
t(X)%*%X
solve(t(X)%*%X
solve(t(X)%*%X)
beta = solve(XtX) * t(X) * GPA
XtX = t(X)%*%X
beta = solve(XtX) * t(X) * GPA
beta = solve(t(X)%*%X) %*% t(X) %*% GPA
(beta = solve(t(X)%*%X) %*% t(X) %*% GPA)
XtX = matrix(c(6, 6, 5, 6, 9, 7, 5, 7, 6), 3, 3, byrow = TRUE}
XtX = matrix(c(6, 6, 5, 6, 9, 7, 5, 7, 6), 3, 3, byrow = TRUE)
Xty = c(2, 4, 2)
solve(XtX)%*%Xty
Xty = c(2, 4, 2)
t(Xty)
Xty
solve(XtX)%*%Xty
solve(XtX)
solve(XtX)%*%Xty
as.integer(solve(XtX)%*%Xty)
as.numeric(solve(XtX)%*%Xty)
520.4 - 5.82 * 22
520.4 - 5.82*(23 - 19)
- 5.82 \times (23 - 19)
5.82 \times (23 - 19)
-5.82 * (23 - 19)
520.4 - 5.82 *21.4
-99.41 + 3.94 * 70
3.94 * 1.5
# Dlaczego `v %*% m` nie działa?
v%*%m
###### Zadanie 1 ######
# Utwórz wektor pięciu jedynek, czyli: `[1,1,1,1,1]`
c(1,1,1,1,1)
######### Zadania z wprowadzenia do R #########################################
# 20/10/2023
###### Zadanie 1 ######
# Utwórz wektor pięciu jedynek, czyli: `[1,1,1,1,1]`
c(1,1,1,1,1)
rep(1, 5)
# Zauważ, że operator dwukropka `a:b` jest skrótem od  *konstruuj sekwencję
# **od** `a` **do** `b`*. Utwórz wektor, od który będzie odliczał od 10 do 0,
# czyli będzie wyglądał tak: `[10,9,8,7,6,5,4,3,2,1,0]`
10:0
seq(10, 0, -1)
# funkcja `rep` pobiera dodatkowe argumenty `times` i `each`, które mówią,
# jak często *każdy element* powinien być powtarzany
# (w przeciwieństwie do całego wektora wejściowego).
# Użyj `rep`, aby utworzyć wektor wyglądający tak:
# `[1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3]`
(wek2=rep( c(rep(1,3),rep(2,3),rep(3,3)),2 ))
###### Zadanie 1 ######
# Utwórz wektor wypełniony 10 liczbami wylosowanymi
# z rozkładu jednostajnego (podpowiedź: użyj funkcji „runif”)
# i zapisz je w `x`.
x = runif(10)
# Używając podzbioru logicznego jak powyżej,
# zbierz wszystkie elementy `x`,
# które są większe niż 0,5 i zapisz je w `y`.
# używając funkcji „which”, zapisz *indeksy* wszystkich
# elementów „x”, które są większe niż 0,5 w „iy”.
(y = x[x>0.5])
iy = which(x>0.5)
# Sprawdź, czy „y” i „x[iy]” są identyczne.
y == x[iy]
#### Zadanie 3
# Utwórz wektor zawierający „1,2,3,4,5” o nazwie v.
v=1:5
# Utwórz macierz(2,5) `m` zawierającą dane `1,2,3,4,5,6,7,8,9,10`. Pierwszym wierszem powinno być „1,2,3,4,5”.
m = matrix(1:10, 2, 5, byrow = 1 )
m
rbind(v, 6:10)
# Wykonaj mnożenie macierzy `m` przez `v`. Użyj polecenia `%*%`. Jaki wymiar ma wyjście?
m%*%v
# Dlaczego `v %*% m` nie działa?
v%*%m
ex_list = list(
a = c(1, 2, 3, 4),
b = TRUE,
c = "Hello!",
d = function(arg = 42) {print("Hello World!")},
e = diag(5)
)
nowa_lista = list(
"to",
"jest niesamowite",
ex_list
)
nowa_lista
nowa_lista = list(
a = "to",
b =  "jest niesamowite",
ex_list =  ex_list
)
nowa_lista$ex_list$c
# Dostęp do elementów odbywa się jak na zwykłej liście,
# tylko z kilkoma warstwami. Pobierz element `c` z `ex_list` w `nowa_lista`!
nowa_lista$ex_list$c
# Utwórz nowy wyraz z pierwszego elementu w `nowa_lista',
# elementu pod etykietą `this`. Użyj funkcji „paste”,
# aby wydrukować na ekranie „R jest niesamowity”.
paste("R", nowa_lista$a, nowa_lista$b)
paste("R - ", nowa_lista$a, nowa_lista$b)
rm(list = ls()) # wyczyść środowisko
#
install.packages("wooldridge")
data("wage1", package = "wooldridge")   # załaduj dane data
force(wage1)
View(wage1)
# plot 2: dodaj panel z histogramem i rozkładem
hist(wage1$wage,prob = TRUE, col = "grey", border = "red",
main = "Histogram of wages and Density",xlab = "hourly wage")
lines(density(wage1$wage), col = "black", lw = 2)
hist(wage1$educ)
library(dyplr)
library(dpylr)
library(dplyr)
library(tidyr)
rm(list = ls()) # wyczyść środowisko
#
install.packages("wooldridge")
data("wage1", package = "wooldridge")   # załaduj dane data
unique(wage1$educ)
wage1 %>% filter(educ==10) %>% select(wage) %>% hist(wage)
wage1 %>% filter(educ==10) %>% select("wage") %>% hist(wage)
wage1 %>% filter(educ==10)
wage1 %>% filter(educ==10) %>% select(c("wage")
wage1 %>% filter(educ==10) %>% select(c("wage")
wage1 %>% filter(educ==10) %>% select(c("wage"))
wage1 %>% filter(educ==10) %>% select(c("wage")) %>% hist(wage)
wage1 %>% filter(educ==10) %>% select(c("wage")) %>% hist(. , wage)
vec = names(wage1)
gather(wage1, paste(names(wage1)), key="variable", value = "value")
wagetib = gather(wage1, paste(names(wage1)), key="variable", value = "value")
wagetib = as_tibble(wagetib)
View(wagetib)
help
wagetib
data("wage1", package = "wooldridge")   # załaduj dane data
wage1=as_tibble(wage1)
wage1
wage1 %>% filter(educ==10) %>% select(c("wage")) %>% hist(. , wage)
help(hist)
wage1 %>% filter(educ==10) %>% select(c("wage")) %>% hist(as.numeric(wage))
wage1 %>% filter(educ==10) %>% select(c("wage")) %>% hist(as.integer(wage))
rm(list = ls()) # wyczyść środowisko
#
install.packages("wooldridge")
data("wage1", package = "wooldridge")   # załaduj dane data
force(wage1)
install.packages("skimr") # statystyki podsumowujące
skim(wage1)
?library
library(skimr)
library(wooldridge)
# statystyki
skim(wage1)
stargazer(wage1)
install.packages("stargazer") # latex tabele
library(wooldridge)
wage1 %>% filter(educ==10) %>% select(c("wage")) %>% hist(as.integer(wage))
stargazer(wage1)
library(stargazer)
library(stargazer)
stargazer(wage1)
install.packages("sandwich") # błędy standardowe
# loading packages
library(sandwich)
install.packages("dyplyr")
install.packages("(summarytools")
install.packages("summarytools")
library(dplyr)
library(summarytools)
library(sandwich)
library(stargazer)
library(skimr)
library(wooldridge)
data %>% select(wage, educ, female, tenure, married, nonwhite) %>% descr()
wage1 %>% select(wage, educ, female, tenure, married, nonwhite) %>% descr()
help(descr)
# 2
wage1 %>%
select(wage, educ, female, tenure, married, nonwhite) %>%
descr( ,stats = c("mean", "sd", "min", "max"))
wage1 %>%
select(wage, educ, female, tenure, married, nonwhite) %>%
descr( ,stats = c("mean", "sd", "min", "max", "n"))
# 2
wage1 %>%
select(wage, educ, female, tenure, married, nonwhite) %>%
descr( ,stats = c("mean", "sd", "min", "max", "count"))
wage1 %>%
select(wage, educ, female, tenure, married, nonwhite) %>%
descr( ,stats = c("mean", "sd", "min", "q1", "med", "q3", "max", "n.valid"))
x =  wage1 %>%
select(wage, educ, female, tenure, married, nonwhite) %>%
descr( ,stats = c("mean", "sd", "min", "q1", "med", "q3", "max", "n.valid"))
View(x)
x = as.data.frame(x)
View(x)
x = round_df(x, 2)
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
df[,nums] <- round(df[,nums], digits = digits)
(df)
}
x = round_df(x, 2)
View(round_df)
View(x)
# 2 - zapisywanie tabeli w excelu
summtab =  wage1 %>%
select(wage, educ, female, tenure, married, nonwhite) %>%
descr( ,stats = c("mean", "sd", "min", "q1", "med", "q3", "max", "n.valid"))
summtab = as.data.frame(summtab)
# zaokrąglanie cyfr w całym data frame
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
df[,nums] <- round(df[,nums], digits = digits)
(df)
}
summtab = round_df(summtab, 3)
View(summtab)
install.packages("writexl") # zapisywanie w excelu
library(writexl)
setwd("C:\\Users\\szalas\\OneDrive\\_ekonometria2023\\_lab3")
write_xlsx(sumtab,"output\\statystyki_opisowe.xlsx")
help("write_xlsx")
write_xlsx(summtab,"output\\statystyki_opisowe.xlsx")
help(stargazer)
stargazer(attitude[ ,c("wage", "educ", "female", "tenure", "married", "nonwhite")])
# 3 - dla uzytkowników latex'a
stargazer(wage1[ , c("wage", "educ", "female", "tenure", "married", "nonwhite") ])
wage1short = wage1[ , c("wage", "educ", "female", "tenure", "married", "nonwhite") ]
stargazer(wage1short)
stargazer(wage1short, summary.stat = c("max"	"mean" "sd" "min" "p25" "median" "p75" "n" ))
stargazer(wage1short, summary.stat = c("max","mean","sd","min","p25","median","p75","n" ))
help(out)
install.packages("seas")
library(seas)
library(dplyr)
help(out)
# 3 - dla uzytkowników latex'a (i nie tylko)
wage1short = wage1[ , c("wage", "educ", "female", "tenure", "married", "nonwhite") ]
stargazer(wage1short,
summary.stat = c("max","mean","sd","min","p25","median","p75","n" ),
out = "output\\statystyki_opisowe2.html" )
wage1short = wage1[ , c("wage", "educ", "female", "tenure", "married", "nonwhite") ]
stargazer(
wage1short,
summary.stat = c("max","mean","sd","min","p25","median","p75","n" ),
type = "text",
title = "Statystyki opisowe",
label = "tab:summary",
style = "apsr",
out = "output\\statystyki_opisowe2.html"
)
lm(wage ~ educ + female + tenure + married + nonwhite + expersq + tenuresq, wage1)
lm(wage ~ educ + female + tenure + married + nonwhite + expersq + tenursq, wage1)
lm(lwage ~ educ + female + tenure + married + nonwhite + expersq + tenursq, wage1)
model1 = lm(wage ~ educ + female + tenure + married + nonwhite + expersq + tenursq, wage1)
model2 = lm(lwage ~ educ + female + tenure + married + nonwhite + expersq + tenursq, wage1)
models <- list(model1, model2)
stargazer(
models,
type = "text",
keep.stat = c("n", "rsq", "adj.rsq"),
omit = c("Constant"),
title = "Płace - regresja"
)
stargazer(model1, model1, se=list(NULL, robust.se),
column.labels=c("default","robust"), align=TRUE)
cov <- vcovHC(model1, type = "HC")
robust.se <- sqrt(diag(cov))
stargazer(model1, model1, se=list(NULL, robust.se),
column.labels=c("default","robust"), align=TRUE)
stargazer(model1, model1,
se=list(NULL, robust.se),
column.labels=c("default","robust"),
align=TRUE,
keep.stat = c("n", "rsq", "adj.rsq"),
omit = c("Constant"),
title = "Płace - regresja")
stargazer(
models,
type = "text",
keep.stat = c("n", "rsq", "adj.rsq"),
omit = c("Constant"),
title = "Płace - regresja"
)
stargazer(model1, model1,
type = "text",
se=list(NULL, robust.se),
column.labels=c("default","robust"),
align=TRUE,
keep.stat = c("n", "rsq", "adj.rsq"),
omit = c("Constant"),
title = "Płace - regresja")
stargazer(model1, model1,
type = "text",
se=list(NULL, robust.se),
column.labels=c("default","robust"),
align=TRUE,
keep.stat = c("n", "rsq", "adj.rsq", "f"),
omit = c("Constant"),
title = "Płace - regresja")
help(stargazer)
stargazer(model1, model1,
type = "text",
se=list(NULL, robust.se),
column.labels=c("default","robust"),
align=TRUE,
keep.stat = c("n", "rsq", "adj.rsq", "f"),
omit = c("Constant"),
title = "Płace - regresja",
out = "output\\statystyki_opisowe2.txt")
install.packages("lmtest") # testowanie
library(lmtest)
bptest(model1)
help(lmtest)
install.packages("whitestrap") # test White'a
library(whitestrap)
white_test(model1)
bptest(model1, data=wage1, studentize=FALSE)
cov
vcovHC(model1, type="HC0")
View(cov)
# test Breuscha-Pagana
# komenda bptest używa statystyki chi kwadrat
bptest(model1, studentize = FALSE)
# test z użyciem statystyki F -  wystarczy sprawdzić statystykę F
summary(lm(formula = resid2 ~ educ + exper + exper2 + female, data = cps))
summary(lm(formula = resid2 ~ educ + exper + expersq + female, data = wage1))
### heteroskedastyczność ###
resid1 = resid(model1)
### heteroskedastyczność ###
wage1$resid1 = resid(model1)
wage1$resid1sq = (wage1$resid1)^2
# test bp
modelaux = lm(resid1sq ~ educ + female + tenure + married + nonwhite + expersq + tenursq, wage1)
summary(modelaux)$r
summary(modelaux)
x = summary(modelaux)
summary(modelaux)$r.squared
stat_bp = (summary(modelaux)$r.squared*(1/7))/((1-summary(modelaux)$r.squared)*(1/(526 - 7 -1)))
stat_bp
help(f "distribution")
help(qf)
(f_kryt = qf(0.95, 7, (526 - 7 -1), ncp))
(f_kryt = qf(0.95, 7, (526 - 7 -1)))
(stat_bp = (summary(modelaux)$r.squared*(1/7))/((1-summary(modelaux)$r.squared)*(1/(526 - 7 -1))))
(f_kryt = qf(0.95, 7, (526 - 7 -1)))
(f_kryt = pf(0.95, 7, (526 - 7 -1)))
(pval_bp = qf(0.95, 7, (526 - 7 -1)))
