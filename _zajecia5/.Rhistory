sheet="demo", # wybieramy arkusz
range="A1:Q1522")  # wybieramy zakres komórek do wczytania
tot_pop_raw
# dane o populacji
tot_pop_raw = read_excel(
path="C:/Users/alter-ego/OneDrive/_ekonometria2023/_5_data_management/demoxls.xls",
sheet="demo", # wybieramy arkusz
range="A1:Q1522")  # wybieramy zakres komórek do wczytania
setwd("C:/Users/alter-ego/OneDrive/_ekonometria2023/_5_data_management")
tot_pop_raw = read_excel(
path="demoxls.xls",
sheet="demo", # wybieramy arkusz
range="A1:Q1522")  # wybieramy zakres komórek do wczytania
tot_pop_raw = read_excel( path="demoxls.xls",
sheet="demo", # wybieramy arkusz
range="A1:Q1522")  # wybieramy zakres komórek do wczytania
setwd("C:\\Users\\alter-ego\\OneDrive\\_ekonometria2023\\ekonometria_wne_2023\\_zajecia5")
tot_pop_raw = read_excel( path="demoxls.xls",
sheet="demo", # wybieramy arkusz
range="A1:Q1522")  # wybieramy zakres komórek do wczytania
tot_pop_raw
# rozdziel pierwszą kolumnę
tot_pop_raw = tot_pop_raw %>%
separate(`indic_de,geo\\time`, into = c("indicator", "country"), sep = ",")
tot_pop_raw
library(tidyr)   # gather()
tot_pop = gather(tot_pop_raw, paste(2008:2023),key="year", value = "counts")
tot_pop
# mamy różne wskaźniki demograficzne
table(tot_pop$indicator)
# install.packages("countrycode")
library(countrycode)
help(countrycode)
# install.packages("countrycode")
library(countrycode)
help(countrycode)
# install.packages("countrycode")
install.packages("countrycode")
library(countrycode)
help(countrycode)
# nie mamy nazw krajów, możemy jednka zm ieć kody na nazwy, korzystając z `countrycode`
tot_pop$country2 = countrycode(tot_pop$country, origin = 'eurostat', destination = 'country.name')
tot_pop
tot_pop %>% select(c("country", "country2")) %>% filter(is.na(country2)==TRUE)
tot_pop = tot_pop %>% select(!c("country")) %>% filter(is.na(country2)==FALSE)
tot_pop
names(tot_pop)[4] <- "Country"   # zmiana nazwy pierwszej kolmny
tot_pop
# Tak jest lepiej! Jednak „counts” to nadal „chr”! Zamieńmy to na liczbę:
tot_pop$counts2 = as.integer(tot_pop$counts)
example_data = data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbye"),
z = rep(c(TRUE, FALSE), 5))
example_data
all.equal(length(example_data$x),
length(example_data$y),
length(example_data$z))
str(example_data)
nrow(example_data)
ncol(example_data)
dim(example_data)
names(example_data)
head(mtcars,n=2)
head(mtcars) # default
str(mtcars)
?mtcars
names(mtcars)
mtcars$mpg
mtcars$wt
mtcars[mtcars$mpg > 20, c("cyl", "disp", "wt")]
subset(mtcars, subset = mpg > 25, select = c("cyl", "disp", "wt"))
ncols(mtcars)
ncol(mtcars)
mean(mtcars$mpg)
mean(mtcars[mtcars$cyl > 4, c("mpg")])
x = 1
y = "roses"
z = function(x){sqrt(x)}
z(9)
x = 1
y = 3
if (x > y) {  # test if x > y
# if TRUE
z = x * y
print("x większe y")
} else {
# if FALSE
z = x + 5 * y
print("x mniejsze równe y")
}
x = 5
y = 3
if (x > y) {  # test if x > y
# if TRUE
z = x * y
print("x większe y")
} else {
# if FALSE
z = x + 5 * y
print("x mniejsze równe y")
}
for (i in 1:5){
print(i)
}
for (i in c("mango","banany","jabłka")){
print(paste("Uwielbiam ",i))  # the paste function pastes together strings
}
for (i in 2:3){
# pierwsze zagnieżdżenie: dla każdego i
for (j in c("mango","banany","jabłka")){
# drugir zagnieżdżenie: dla każdego j
print(paste("Poproszę",i,j,"?"))
}
}
witaj <- function(imie = "Lord Vader"){
paste("Witaj,",imie)
# mozemy również napisać:
# return(paste("Wiatj",imie))
}
# wywołujemy funkcję, pisząc jej nazwę z okrągłymi nawiasami.
witaj("x")
# wywołujemy funkcję, pisząc jej nazwę z okrągłymi nawiasami.
witaj()
witaj
library(ggplot2)
?mpg # dokumentacja danych
### Miary tendencji centralnej - średnia, mediana
mean(mpg$cty)     # średnia
median(mpg$cty)   # mediana
### Miary rozrzutu
var(mpg$cty)    # wariancja
sd(mpg$cty)     # odchylenie standardowe
IQR(mpg$cty)    # rozstęp międzykwartylowy
min(mpg$cty)
max(mpg$cty)
range(mpg$cty)
### dla zmiennych kategorycznych
table(mpg$drv)
table(mpg$drv) / nrow(mpg)  # w procentach
hist(mpg$cty)
?hist
hist(mpg$cty,
xlab   = "Miles Per Gallon (City)",
main   = "Histogram of MPG (City)", # tytuł
breaks = 12,   # ile przedziałów?
col    = "red",
border = "blue")
barplot(table(mpg$drv))
barplot(table(mpg$drv),
xlab   = "Drivetrain (f = FWD, r = RWD, 4 = 4WD)",
ylab   = "Frequency",
main   = "Drivetrains",
col    = "dodgerblue",
border = "darkorange")
boxplot(mpg$hwy)
?mpg
boxplot(hwy ~ drv, data = mpg)
boxplot(hwy ~ drv, data = mpg,
xlab   = "Drivetrain (f = FWD, r = RWD, 4 = 4WD)",
ylab   = "Miles Per Gallon (Highway)",
main   = "MPG (Highway) vs Drivetrain",
pch    = 20,
cex    = 2,
col    = "darkorange",
border = "dodgerblue")
?mpg
plot(hwy ~ displ, data = mpg)
plot(hwy ~ displ, data = mpg,
xlab = "Engine Displacement (in Liters)",
ylab = "Miles Per Gallon (Highway)",
main = "MPG (Highway) vs Engine Displacement",
pch  = 20,
cex  = 2,
col  = "dodgerblue")
ggplot(data = mpg,mapping = aes(x=displ,y=hwy)) + geom_point()
ggplot(data = mpg,mapping = aes(x=displ,y=hwy))
ggplot(data = mpg,mapping = aes(x=displ,y=hwy)) + geom_point()
ggplot(data = mpg, mapping = aes(x=displ,y=hwy)) +   # ggplot() tworzy podstawowy wykres
geom_point(color="blue",size=2) +
scale_y_continuous(name="Miles Per Gallon (Highway)") +  # nazwa osi y
scale_x_continuous(name="Engine Displacement (in Liters)") + # nazwa osi x
theme_bw() +    # zmień tło
ggtitle("MPG (Highway) vs Engine Displacement")   # dodaj tytuł
# być może potrzebyjesz
#install.packages("readr")
library(readr)
### Tidy `data.frames` to `tibbles`
# Pobierzmy dane z pakietu `ggplot2`:
data(mpg,package = "ggplot2")  # load dataset `mpg` from `ggplot2` package
head(mpg, n = 10)
mpg[mpg$hwy > 35, c("manufacturer", "model", "year")]
library(dplyr)
mpg
mpg %>%
filter(hwy > 35)
mpg %>%
filter(hwy > 35) %>%
select(manufacturer, model, year)
# Zauważ, że powyższa składnia jest równoważna następującemu poleceniu bez potoków
# (które jest znacznie gorsze do odczytania!):
library(dplyr)
select(filter(mpg, hwy > 35), manufacturer, model, year)
mpg$manufacturer
table(mpg$manufacturer)
mpg %>% filter(manufacturer=="audi") %>% summarise(mean(year))
mpg %>% filter(manufacturer=="audi") %>% mean(year)
mpg %>% filter(manufacturer=="audi")
mpg %>% filter(manufacturer=="audi") %>% summarise(mean(year), sd(year))
mpg %>%
select(manufacturer, year)
mpg %>%
select(manufacturer, year) %>%
group_by(manufacturer) %>%
summarise(mean(year))
library(readxl)
library(dplyr)
library(tidyr)
setwd("C:\\Users\\alter-ego\\OneDrive\\_ekonometria2023\\ekonometria_wne_2023\\_zajecia5")
tot_pop_raw = read_excel( path="demoxls.xls",
sheet="demo", # wybieramy arkusz
range="A1:Q1522")  # wybieramy zakres komórek do wczytania
tot_pop_raw
View(tot_pop_raw)
tot_pop_raw = tot_pop_raw %>%
separate(`indic_de,geo\\time`, into = c("indicator", "country"), sep = ",")
tot_pop_raw
library(tidyr)   # gather()
tot_pop = gather(tot_pop_raw, paste(2008:2023),key="year", value = "counts")
tot_pop
table(tot_pop$indicator)
tot_pop
library(countrycode)
help(countrycode)
# nie mamy nazw krajów, możemy jednka zm ieć kody na nazwy, korzystając z `countrycode`
tot_pop$country2 = countrycode(tot_pop$country, origin = 'eurostat', destination = 'country.name')
tot_pop
tot_pop %>% select(c("country", "country2")) %>% filter(is.na(country2)==TRUE)
tot_pop = tot_pop %>% select(!c("country")) %>% filter(is.na(country2)==FALSE)
tot_pop
names(tot_pop)[4] <- "Country"   # zmiana nazwy pierwszej kolmny
tot_pop$counts2 = as.integer(tot_pop$counts)
# zobaczmy co powoduje powstawanie missingów?
tot_pop %>% select(c("counts", "counts2")) %>% filter(is.na(counts2)==TRUE)
library(gsubfn)
tot_pop$counts = gsub('b', '', tot_pop$counts)
tot_pop$counts = gsub('p', '', tot_pop$counts)
tot_pop$counts = gsub('e', '', tot_pop$counts)
tot_pop$counts = as.integer(tot_pop$counts)
# wyrzuć zmienną counts2 ze zbioru
tot_pop = tot_pop %>%
select(!c("counts2"))
tot_pop
# Zróbmy wykres przedstawiający populację Francji, Wielkiej Brytanii i Włoch
# na przestrzeni czasu, w milionach ludzi. Wykorzystamy składnię `piping' `dplyr',
# którą przedstawiliśmy tuż powyżej.
library(dplyr)  #  %>%, filter, mutate, ...
library(ggplot2)
# 1. weź dane `tot_pop`
tot_pop %>%
# 2. Odfiltruj dane o populacji
filter(indicator=="AVG") %>%
# oraz wybierz tylko 3 kraje
filter(Country %in% c("France","United Kingdom","Italy")) %>%
# 3. przeslij rezultat do funkcji mutate
# wyraź dane w milionach, w nowej kolumnie
mutate(millions = counts / 1e6) %>%
# 4. przeslij dane i narysuj wykres
ggplot(mapping = aes(x=year,y=millions,color=Country,group=Country)) + geom_line(size=1)
top5 = tot_pop %>% filter(indicator=="AVG") %>%
arrange(desc(counts)) %>%  # ustaw w malejącej kolejności kolumnę `counts`
top_n(5)
bottom5 = tot_pop %>% filter(indicator=="AVG") %>%
arrange(desc(counts)) %>%
top_n(-5)
# zobaczmy top 5
top5
# zobaczmy bottom 5
bottom5
topbottom = tot_pop %>% filter(indicator=="AVG") %>%
group_by(Country) %>%
filter(year > 2012) %>%
summarise(mean_count = mean(counts, na.rm = TRUE)) %>%
arrange(desc(mean_count))
top5 = topbottom %>% top_n(5)
bottom5 = topbottom %>% top_n(-5)
top5
bottom5
?arrange()
example_data = data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbye"),
z = rep(c(TRUE, FALSE), 5))
example_data
example_data$x
example_data$x
all.equal(length(example_data$x),
length(example_data$y),
length(example_data$z))
str(example_data)
nrow(example_data)
ncol(example_data)
dim(example_data)
names(example_data)
?read.csv
x = 1
y = "roses"
z = function(x){sqrt(x)}
z(9)
if (condition = TRUE) {
x = 5
y = 3
if (x > y) {  # test if x > y
# if TRUE
z = x * y
print("x większe y")
} else {
# if FALSE
z = x + 5 * y
print("x mniejsze równe y")
}
z
for (i in 1:5){
print(i)
}
for (i in c("mango","banany","jabłka")){
print(paste("Uwielbiam ",i))  # the paste function pastes together strings
}
for (i in 2:3){
# pierwsze zagnieżdżenie: dla każdego i
for (j in c("mango","banany","jabłka")){
# drugir zagnieżdżenie: dla każdego j
print(paste("Poproszę",i,j,"?"))
}
}
witaj <- function(imie = "Lord Vader"){
paste("Witaj,",imie)
# mozemy również napisać:
# return(paste("Wiatj",imie))
}
# wywołujemy funkcję, pisząc jej nazwę z okrągłymi nawiasami.
witaj()
witaj(x)
witaj("x")
# załadujmy pakiet, daje nam dostęp do zbiorU danych mpg
library(ggplot2)
?mpg # dokumentacja danych
### Miary tendencji centralnej - średnia, mediana
mean(mpg$cty)     # średnia
median(mpg$cty)   # mediana
### Miary rozrzutu
var(mpg$cty)    # wariancja
sd(mpg$cty)     # odchylenie standardowe
IQR(mpg$cty)    # rozstęp międzykwartylowy
min(mpg$cty)
max(mpg$cty)
range(mpg$cty)
### dla zmiennych kategorycznych
table(mpg$drv)
table(mpg$drv) / nrow(mpg)  # w procentach
### Histogram
hist(mpg$cty)
?hist
hist(mpg$cty,
xlab   = "Miles Per Gallon (City)",
main   = "Histogram of MPG (City)", # tytuł
breaks = 12,   # ile przedziałów?
col    = "red",
border = "blue")
barplot(table(mpg$drv))
barplot(table(mpg$drv),
xlab   = "Drivetrain (f = FWD, r = RWD, 4 = 4WD)",
ylab   = "Frequency",
main   = "Drivetrains",
col    = "dodgerblue",
border = "darkorange")
unique(mpg$drv)
boxplot(mpg$hwy)
boxplot(hwy ~ drv, data = mpg)
boxplot(hwy ~ drv, data = mpg,
xlab   = "Drivetrain (f = FWD, r = RWD, 4 = 4WD)",
ylab   = "Miles Per Gallon (Highway)",
main   = "MPG (Highway) vs Drivetrain",
pch    = 20,
cex    = 2,
col    = "darkorange",
border = "dodgerblue")
plot(hwy ~ displ, data = mpg)
plot(hwy ~ displ, data = mpg,
xlab = "Engine Displacement (in Liters)",
ylab = "Miles Per Gallon (Highway)",
main = "MPG (Highway) vs Engine Displacement",
pch  = 20,
cex  = 2,
col  = "dodgerblue")
ggplot(data = mpg,mapping = aes(x=displ,y=hwy)) + geom_point()
ggplot(data = mpg,mapping = aes(x=displ,y=hwy))
ggplot(data = mpg,mapping = aes(x=displ,y=hwy)) + geom_point()
ggplot(data = mpg, mapping = aes(x=displ,y=hwy)) +   # ggplot() tworzy podstawowy wykres
geom_point(color="blue",size=2) +
scale_y_continuous(name="Miles Per Gallon (Highway)") +  # nazwa osi y
scale_x_continuous(name="Engine Displacement (in Liters)") + # nazwa osi x
theme_bw() +    # zmień tło
ggtitle("MPG (Highway) vs Engine Displacement")   # dodaj tytuł
library(readr)
data(mpg,package = "ggplot2")  # load dataset `mpg` from `ggplot2` package
head(mpg, n = 10)
View(mpg)
str(mpg)
names(mpg)
mpg$year
mpg$hwy
mpg[mpg$hwy > 35, c("manufacturer", "model", "year")]
# Alternatywą byłoby użycie funkcji „subset()”, która ma znacznie bardziej czytelną składnię.
subset(mpg, subset = hwy > 35, select = c("manufacturer", "model", "year"))
library(dplyr)
library(dplyr)
mpg %>%
filter(hwy > 35) %>%
select(manufacturer, model, year)
mpg %>%
filter(hwy > 35)
mpg %>%
filter(hwy > 35) %>%
select(manufacturer, model, year)
library(dplyr)
select(filter(mpg, hwy > 35), manufacturer, model, year)
table(mpg$manufacturer)
View(mpg)
mpg[manufacturer=="audi", c("year")]
mpg[mpg$manufacturer=="audi", c("year")]
mean(mpg[mpg$manufacturer=="audi", c("year")])
as.vector(mpg[mpg$manufacturer=="audi", c("year")]))
as.vector(mpg[mpg$manufacturer=="audi", c("year")])
mean(as.vector(mpg[mpg$manufacturer=="audi", c("year")]))
as.vector(mpg[mpg$manufacturer=="audi", c("year")])
mean(as.vector(mpg[mpg$manufacturer=="audi", c("year")]))
mpg %>% filter(manufacturer=="audi") %>% mean(year)
mpg %>% filter(manufacturer=="audi") %>% summarise(mean(year), sd(year))
mpg %>%
select(manufacturer, year)
mpg %>%
select(manufacturer, year) %>%
group_by(manufacturer)
mpg %>%
select(manufacturer, year) %>%
group_by(manufacturer) %>%
summarise(mean(year))
# Teraz odczytamy dane
library(readxl)
library(dplyr)
library(tidyr)
setwd("C:\\Users\\alter-ego\\OneDrive\\_ekonometria2023\\ekonometria_wne_2023\\_zajecia5")
tot_pop_raw = read_excel( path="demoxls.xls",
sheet="demo", # wybieramy arkusz
range="A1:Q1522")  # wybieramy zakres komórek do wczytania
tot_pop_raw
# rozdziel pierwszą kolumnę
tot_pop_raw = tot_pop_raw %>%
separate(`indic_de,geo\\time`, into = c("indicator", "country"), sep = ",")
tot_pop_raw
tot_pop = gather(tot_pop_raw, paste(2008:2023),key="year", value = "counts")
tot_pop
# mamy różne wskaźniki demograficzne
table(tot_pop$indicator)
tot_pop
tot_pop$country2 = countrycode(tot_pop$country, origin = 'eurostat', destination = 'country.name')
tot_pop$country2
tot_pop
View(tot_pop)
tot_pop = tot_pop %>% select(!c("country")) %>% filter(is.na(country2)==FALSE)
names(tot_pop)[4] <- "Country"   # zmiana nazwy pierwszej kolmny
View(tot_pop)
tot_pop
# Tak jest lepiej! Jednak „counts” to nadal „chr”! Zamieńmy to na liczbę:
tot_pop$counts2 = as.integer(tot_pop$counts)
tot_pop$counts = gsub('b', '', tot_pop$counts)
tot_pop$counts = gsub('p', '', tot_pop$counts)
tot_pop$counts = gsub('e', '', tot_pop$counts)
tot_pop$counts = as.integer(tot_pop$counts)
# wyrzuć zmienną counts2 ze zbioru
tot_pop = tot_pop %>%
select(!c("counts2"))
tot_pop
# 1. weź dane `tot_pop`
tot_pop %>%
# 2. Odfiltruj dane o populacji
filter(indicator=="AVG") %>%
# oraz wybierz tylko 3 kraje
filter(Country %in% c("France","United Kingdom","Italy")) %>%
# 3. przeslij rezultat do funkcji mutate
# wyraź dane w milionach, w nowej kolumnie
mutate(millions = counts / 1e6) %>%
# 4. przeslij dane i narysuj wykres
ggplot(mapping = aes(x=year,y=millions,color=Country,group=Country)) + geom_line(size=1)
top5 = tot_pop %>% filter(indicator=="AVG") %>%
arrange(desc(counts)) %>%  # ustaw w malejącej kolejności kolumnę `counts`
top_n(5)
bottom5 = tot_pop %>% filter(indicator=="AVG") %>%
arrange(desc(counts)) %>%
top_n(-5)
# zobaczmy top 5
top5
# zobaczmy bottom 5
bottom5
topbottom = tot_pop %>% filter(indicator=="AVG") %>%
group_by(Country) %>%
filter(year > 2012) %>%
summarise(mean_count = mean(counts, na.rm = TRUE)) %>%
arrange(desc(mean_count))
top5 = topbottom %>% top_n(5)
bottom5 = topbottom %>% top_n(-5)
top5
bottom5
